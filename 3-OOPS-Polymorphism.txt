Polymorphism
=============
-->Poly means many.
-->Morphs means forms.
-->Polymorphism means 'Many Forms'.

Ex-1:
Yourself is best example of polymorphism.In front of Your parents You will have
one type of behaviour and with friends another type of behaviour.Same person but different behaviours at different places,which is nothing but polymorphism.

Ex-2:
+ operator acts as concatenation and arithmetic addition

Ex-3:
* operator acts as multiplication and repetition operator

Ex-4:
The Same method with different implementations in Parent class and child
classes.(overriding)

Related to polymorphism the following 4 topics are important
1.Duck Typing Philosophy of Python
2.Overloading
	-->Operator Overloading
	-->Method Overloading
	-->Constructor Overloading
3.Overriding
	-->Method overriding
	-->constructor overriding

1.	Duck Typing Philosophy of Python:
-----------------------------------------------------
-->In Python we cannot specify the type explicitly.
-->Based on provided value at runtime the type will be considered automatically.
-->Hence Python is considered as Dynamically Typed Programming Language.
def f1(obj):
obj.talk()

What is the type of obj? We cannot decide at the beginning. At runtime we can pass any type.Then how we can decide the type? At runtime if 'it walks like a duck and talks like a duck,it must be duck'. Python follows this principle. This is called Duck Typing Philosophy of Python.

Demo Program:
----------------------

1)	class Duck:
2)	def talk(self):
3)	print('Quack.. Quack..') 4)
5)	class Dog:
6)	def talk(self):
7)	print('Bow Bow..') 8)
9)	class Cat:
10)	def talk(self):
11)	print('Moew Moew ..') 12)
13)	class Goat:
14)	def talk(self):
15)	print('Myaah Myaah ..') 16)
17)	def f1(obj):
18)	obj.talk() 19)
20)	l=[Duck(),Cat(),Dog(),Goat()]
21)	for obj in l:
22)	f1(obj)

Output:
----------
Quack.. Quack.. Moew Moew .. Bow Bow..
Myaah Myaah ..

-->The problem in this approach is if obj does not contain talk() method then we will get AttributeError.
1)	class Duck:
2)	def talk(self):
3)	print('Quack.. Quack..') 4)
5)	class Dog:
6)	def bark(self):
7)	print('Bow Bow..') 8)
9)	def f1(obj):
10)	obj.talk()
11)	d=Duck()
12) f1(d) 13)
14) d=Dog()
15) f1(d)

o/p: D:\pythonclasses>py test.py Quack.. Quack..
Traceback (most recent call last):
File "test.py", line 22, in <module> f1(d)
File "test.py", line 13, in f1 obj.talk()
AttributeError: 'Dog' object has no attribute 'talk'

-->But we can solve this problem by using hasattr() function.

-->hasattr(obj,'attributename')
-->attributename can be method name or variable name

Demo Program with hasattr() function:
------------------------------------------------------

1)	class Duck:
2)	def talk(self):
3)	print('Quack.. Quack..') 4)
5)	class Human:
6)	def talk(self):
7)	print('Hello Hi...') 
9)	class Dog:
10)	def bark(self):
11)	print('Bow Bow..') 12)
13)	def f1(obj):
14)	if hasattr(obj,'talk'):
15)	obj.talk()
16)	elif hasattr(obj,'bark'):
17)	obj.bark()
18)	
19)	d=Duck()
20) f1(d) 21)
22) h=Human()
23) f1(h) 24)
25) d=Dog()
26) f1(d)

Overloading:
===========
-->We can use same operator or methods for different purposes.

Ex-1:
+ operator can be used for Arithmetic addition and String concatenation
print(10+20)#30 print('durga'+'soft')#durgasoft

Ex-2:
* operator can be used for multiplication and string repetition purposes.
print(10*20)#200 print('mahesh'*3)#maheshmaheshmahesh

 
Ex-3:
 

We can use deposit() method to deposit cash or cheque or dd deposit(cash)
deposit(cheque) deposit(dd)
 

There are 3 types of overloading
1.	Operator Overloading
2.	Method Overloading
3.	Constructor Overloading
1.	Operator Overloading:
-----------------------------------
-->We can use the same operator for multiple purposes, which is nothing but operator overloading.

-->Python supports operator overloading.

Ex-1:
+ operator can be used for Arithmetic addition and String concatenation
print(10+20)#30 print('durga'+'soft')#durgasoft

Ex-2:
* operator can be used for multiplication and string repetition purposes.
print(10*20)#200 print('durga'*3)#durgadurgadurga

Demo program to use + operator for our class objects:
---------------------------------------------------------------------------

1)	class Book:
2)	def init (self,pages):
3)	self.pages=pages 4)
5)  b1=Book(100)
6)  b2=Book(200)
7) print(b1+b2)

D:\pythonclasses>py test.py Traceback (most recent call last):
File "test.py", line 7, in <module> print(b1+b2)
TypeError: unsupported operand type(s) for +: 'Book' and 'Book'

-->We can overload + operator to work with Book objects also. i.e Python supports Operator Overloading.

-->For every operator Magic Methods are available. To overload any operator we have to override that Method in our class.

-->Internally + operator is implemented by using add () method.This method is called magic method for + operator. We have to override this method in our class.

Demo program to overload + operator for our Book class objects:
-------------------------------------------------------------------------------------------

1)	class Book:
2)	def init (self,pages):
3)	self.pages=pages 4) 4)
5)	def add (self,other):
6)	return self.pages+other.pages 7)
8)  b1=Book(100)
9)  b2=Book(200)
10) print('The Total Number of Pages:',b1+b2)

Output: The Total Number of Pages: 300

The following is the list of operators and corresponding magic methods.

+ ---> object. add (self,other)
- ---> object. sub (self,other)
* ---> object. mul (self,other)
/ ---> object. div (self,other)
// ---> object. floordiv (self,other)
% ---> object. mod (self,other)
** ---> object.  pow (self,other)
+= ---> object. iadd (self,other)
-= ---> object. isub (self,other)
*= ---> object. imul (self,other)
/= ---> object. idiv (self,other)
//= ---> object. ifloordiv (self,other)
%= ---> object. imod (self,other)
**= ---> object. ipow (self,other)
< ---> object. lt (self,other)
<= ---> object. le (self,other)
> ---> object. gt (self,other)
>= ---> object. ge (self,other)
== ---> object. eq (self,other)
!= ---> object. ne (self,other)

Ex: How to add multiple objects
----------------------------------------------

1)	class Book:
2)	def init (self,pages):
3)	self.pages=pages 4)
5)	def add (self,other):
6)	print("add method calling")
7)	total=self.pages+other.pages
8)	return Book(total) 9)
10)	def str (self):
11)	return str(self.pages) 12)
13) b1=Book(100)
14) b2=Book(200)
15) bx=b1+b2+b3
16)	print(bx)
17)	#print(bx.pages)

o/p:D:\pythonclasses>py test.py add method calling
add method calling 600

Overloading >,>= and <,<= operators for Student class objects:
---------------------------------------------------------------------------------

1)	class Student:
2)	def init (self,name,marks):
3)	self.name=name
4)	self.marks=marks 5)
6)	def gt (self,other):
7)	return self.marks>other.marks 8)
9)	def le (self,other):
10)	return self.marks<=other.marks 11)
12) print("10>20 =",10>20)
13)	s1=Student("Durga",100)
14)	s2=Student("Mahesh",200) 15) print("s1>s2=",s1>s2)
16) print("s1<s2=",s1<s2)
17)  print("s1<=s2=",s1<=s2)
18) print("s1>=s2=",s1>=s2)

Output:
-----------
10>20 = False s1>s2= False s1<s2= True s1<=s2= True s1>=s2= False

Program to overload multiplication operator to work on Employee objects:
---------------------------------------------------------------------------------------------------------

1)	class Employee:
2)	def init (self,name,salary):
3)	self.name=name
4)	self.salary=salary 5)
6)	def mul (self,other):
7)	return self.salary*other.days 8)
9)	class TimeSheet:
10)	def init (self,name,days):
11)	self.name=name
12)	self.days=days 13)
14)	def mul (self,other):
15)	return self.days*other.salary 16)
17)	e=Employee('IKYA',500)
18)	t=TimeSheet('IKYA',25)
19)	print('This Month Salary:',e*t)
20)	print('This Month Salary:',t*e)

Output: This Month Salary: 12500 Output: This Month Salary: 12500

2.	Method Overloading:
---------------------------------
-->If 2 methods having same name but different type of arguments then those methods are said to be overloaded methods.

Ex: m1(int a)
m1(double d)

-->But in Python Method overloading is not possible.
-->If we are trying to declare multiple methods with same name and different number of arguments then Python will always consider only last method.

Demo Program:
----------------------

1)	class Test:
2)	def m1(self):
3)	print('no-arg method')
4)	def m1(self,a):
5)	print('one-arg method')
6)	def m1(self,a,b):
7)	print('two-arg method')
8)	t=Test() 9) #t.m1() 10) #t.m1(10)
11) t.m1(10,20)

Output: two-arg method
-->In the above program python will consider only last method. How we can handle overloaded method requirements in Python:
------------------------------------------------------------------------------------------
-->Most of the times, if method with variable number of arguments required then we can handle with default arguments or with variable number of argument methods.

1)	class Test:
2)	def sum(self,a=None,b=None,c=None):
3)	if a!=None and b!= None and c!= None:
4)	print('The Sum of 3 Numbers:',a+b+c)
5)	elif a!=None and b!= None:
6)	print('The Sum of 2 Numbers:',a+b)
7)	else: 8) print('Please provide 2 or 3 arguments')
8)	t=Test()


Output:
-----------
The Sum of 2 Numbers: 30
The Sum of 3 Numbers: 60
Please provide 2 or 3 arguments

Demo Program with Variable Number of Arguments:
-------------------------------------------------------------------------

1)	class Test:
2)	def sum(self,*a):
3)	total=0
4)	for x in a:
5)	total=total+x
6)	print('The Sum:',total)
7)	t=Test()
8) t.sum(10,20)
9) t.sum(10,20,30)
10) t.sum(10) 13)
11) t.sum()

3.	Constructor Overloading:
---------------------------------------
-->Constructor overloading is not possible in Python.
-->If we define multiple constructors then the last constructor will be considered.

1)	class Test:
2)	def init (self):
3)	print('No-Arg Constructor') 4)
5)	def init (self,a):
6)	print('One-Arg constructor') 7)
8)	def init (self,a,b):
9)	print('Two-Arg constructor') 10)
11) #t1=Test() 12) #t1=Test(10)
13) t1=Test(10,20)

Output: Two-Arg constructor
-->In the above program only Two-Arg Constructor is available.
-->But based on our requirement we can declare constructor with default arguments and variable number of arguments.
Constructor with Default Arguments:
----------------------------------------------------

1)	class Test:
2)	def init (self,a=None,b=None,c=None):
3)	print('Constructor with 0|1|2|3 number of arguments') 4)
5) t1=Test() 6) t2=Test(10)
7) t3=Test(10,20)
8) t4=Test(10,20,30)

Output:
-----------
Constructor with 0|1|2|3 number of arguments Constructor with 0|1|2|3 number of arguments Constructor with 0|1|2|3 number of arguments Constructor with 0|1|2|3 number of arguments

Constructor with Variable Number of Arguments:
---------------------------------------------------------------------

1)	class Test:
2)	def init (self,*a):
3)	print('Constructor with variable number of arguments') 4)
5) t1=Test() 6) t2=Test(10)
7) t3=Test(10,20)
8) t4=Test(10,20,30)
9) t5=Test(10,20,30,40,50,60)

Output:
-----------
Constructor with variable number of arguments Constructor with variable number of arguments Constructor with variable number of arguments Constructor with variable number of arguments Constructor with variable number of arguments
Method overriding:
---------------------------
-->What ever members available in the parent class are bydefault available to the child class through inheritance.
-->If the child class not satisfied with parent class implementation then child class is allowed to redefine that method in the child class based on its requirement.
-->This concept is called overriding.
-->Overriding concept applicable for both methods and constructors.

Demo Program for Method overriding:
-----------------------------------------------------

1)	class P:
2)	def property(self):
3)	print('Gold+Land+Cash+Power')
4)	def marry(self):
5)	print('Appalamma') 6)
7)	class C(P):
8)	def marry(self):
9)	print('Katrina Kaif') 10)
11) c=C()
12)	c.property()
13)	c.marry()

Output:
-----------
Gold+Land+Cash+Power Katrina Kaif

-->From Overriding method of child class,we can call parent class method also by using super() method.

1)	class P:
2)	def property(self):
3)	print('Gold+Land+Cash+Power')
4)	def marry(self):
5)	print('Appalamma') 6)
7)	class C(P):
8)	def marry(self):
9)	super().marry()
10)	print('Katrina Kaif')
11) c=C() 12)
12)	c.property()
13)	c.marry()

Output:
-----------
Gold+Land+Cash+Power Appalamma
Katrina Kaif

Demo Program for Constructor overriding:
------------------------------------------------------------

1)	class P:
2)	def init (self):
3)	print('Parent Constructor') 4)
5)	class C(P):
6)	def init (self):
7)	print('Child Constructor') 8)
9) c=C()

Output: Child Constructor

-->In the above example,if child class does not contain constructor then parent class constructor will be executed

-->From child class constuctor we can call parent class constructor by using super() method.

Demo Program to call Parent class constructor by using super():
------------------------------------------------------------------------------------------

1)	class Person:
2)	def init (self,name,age):
3)	self.name=name
4)	self.age=age 5)
6)	class Employee(Person):
7)	def init (self,name,age,eno,esal):
8)	super(). init (name,age)
9)	self.eno=eno
10)	self.esal=esal

11)	
12)	def display(self):
13)	print('Employee Name:',self.name)
14)	print('Employee Age:',self.age)
15)	print('Employee Number:',self.eno)
16)	print('Employee Salary:',self.esal) 17)
18) e1=Employee('Mahesh',48,872425,26000)
19) e1.display() 20)
20) e2=Employee('Sunny',39,872426,36000)
21) e2.display()

Output:
-----------
Employee Name: Mahesh Employee Age: 48
Employee Number: 872425
Employee Salary: 26000 Employee Name: Sunny Employee Age: 39
Employee Number: 872426
Employee Salary: 36000
Agenda:
1.	Abstract Method
2.	Abstract class
3.	Interface
4.	Public,Private and Protected Members
5.	    str () method
6.	Difference between str() and repr() functions
7.	Small Banking Application

Abstract Method:
------------------------
-->Sometimes we don't know about implementation,still we can declare a method. Such type of methods are called abstract methods.i.e abstract method has only declaration but not implementation.
-->In python we can declare abstract method by using @abstractmethod decorator as follows.

@abstractmethod def m1(self): pass

@abstractmethod decorator present in abc module. Hence compulsory we should import abc module,otherwise we will get error.

abc==>abstract base class module

1)	class Test:
2)	@abstractmethod
3)	def m1(self):
4)	pass

NameError: name 'abstractmethod' is not defined
1)	from abc import *
2)	class Test:
3)	@abstractmethod
4)	def m1(self):
5)	pass

Ex:
-----

1)	from abc import *
2)	class Fruit:
3)	@abstractmethod
4)	def taste(self):
5)	pass

-->Child classes are responsible to provide implemention for parent class abstract methods.

Abstract class:
--------------------
-->Some times implementation of a class is not complete,such type of partially implementation classes are called abstract classes.
-->Every abstract class in Python should be derived from ABC class which is present in abc module.

Case-1:
----------

1)	from abc import *
2)	class Test:
3)	pass
4)	t=Test()

-->In the above code we can create object for Test class b'z it is concrete class and it does not conatin any abstract method.

Case-2:

1)	from abc import *
2)	class Test(ABC):
3)	pass
4)	t=Test()
-->In the above code we can create object,even it is derived from ABC class,b'z it does not contain any abstract method.

Case-3:
----------

1)	from abc import *
2)	class Test(ABC):
3)	@abstractmethod
4)	def m1(self):
5)	pass
6)	t=Test()

TypeError: Can't instantiate abstract class Test with abstract methods m1

Case-4:
----------

1)	from abc import *
2)	class Test:
3)	@abstractmethod
4)	def m1(self):
5)	pass
6)	t=Test()

-->We can create object even class contains abstract method b'z we are not extending ABC class.

Case-5:
----------

1)	from abc import *
2)	class Test:
3)	@abstractmethod
4)	def m1(self):
5)	print('Hello')
6)	t=Test() 7) t.m1()

Output: Hello
Conclusion:
----------------
-->If a class contains atleast one abstract method and if we are extending ABC class then instantiation is not possible.

-->"abstract class with abstract method instantiation is not possible"

-->Parent class abstract methods should be implemented in the child classes. otherwise we cannot instantiate child class.If we are not creating child class object then we won't get any error.

Case-1:
----------

1)	from abc import *
2)	class Vehicle(ABC):
3)	@abstractmethod
4)	def noofwheels(self):
5)	pass
6)
7)	class Bus(Vehicle):
8)	pass

-->It is valid b'z we are not creating Child class object

Case-2:
----------

1)	from abc import *
2)	class Vehicle(ABC):
3)	@abstractmethod
4)	def noofwheels(self):
5)	pass
6)
7)	class Bus(Vehicle):
8)	pass
9)
10) b=Bus()

TypeError: Can't instantiate abstract class Bus with abstract methods noofwheels

Note: If we are extending abstract class and does not override its abstract method then child class is also abstract and instantiation is not possible.
1)	from abc import *
2)	class Vehicle(ABC):
3)	@abstractmethod
4)	def noofwheels(self):
5)	pass
6)
7)	class Bus(Vehicle):
8)	def noofwheels(self):
9)	return 7
10)	
11)	class Auto(Vehicle):
12)	def noofwheels(self):
13)	return 3
14)	
15)	b=Bus()
16)	print(b.noofwheels())#7 17)
18)	a=Auto()
19)	print(a.noofwheels())#3

Note: Abstract class can contain both abstract and non-abstract methods also.

Interfaces In Python

Concreate class vs Abstract Class vs Inteface:
----------------------------------------------------------------
1.	If we dont know anything about implementation just we have requirement specification then we should go for interface.

2.	If we are talking about implementation but not completely then we should go for abstract class.(partially implemented class).

3.	If we are talking about implementation completely and ready to provide service then we should go for concrete class.



from abc import *
class CollegeAutomation(ABC): @abstractmethod
def m1():pass

@abstractmethod def m2():pass

@abstractmethod def m3():pass

class AbsClass(CollegeAutomation): def m1(self):
print("M1 method implementation")

def m2(self):
print("M2 method implementation")

class ConcreteClass(AbsClass): def m3(self):
print("M3 method implementation")

c=ConcreteClass() c.m1()
c.m2()
c.m3()

o/p:D:\pythonclasses>py test.py M1 method implementation
M2 method implementation M3 method implementation

-->In general if an abstract class contains only abstract methods such type of abstract class is considered as interface.

Demo program:
----------------------

1)	from abc import *
2)	class DBinterface(ABC):
3)	@abstractmethod
4)	def connect(self):pass 5)
6)	@abstractmethod
7)	def disconnect(self):pass 8)
9)	class Oracle(DBinterface):
10)	def connect(self):
11)	print("Connecting to Oracle Database	")
12)	def disconnect(self):
13)	print("Disconnecting to Oracle Database	")
14)	
15)	class Sybase(DBinterface):
16)	def connect(self):
17)	print("Connecting to Sybase Database.	")
18)	def disconnect(self):
19)	print("Disconnecting to Sybase Database	")
20)	
21)	'''o=Oracle()
22)	o.connect()
23)	o.disconnect()''' 24)
25)	dname=input("Enter Database:")
26)	print(globals()[dname])
27)	className=globals()[dname]
28)	c=className()
29)	c.connect()
30)	c.disconnect()
o/p:D:\pythonclasses>py test.py Enter Database:Oracle
<class ' main .Oracle'> Connecting to Oracle Database......
Disconnecting to Oracle Database......

D:\pythonclasses>py test.py Enter Database:Sybase
<class ' main	Sybase'>
Connecting to Sybase Database......
Disconnecting to Sybase Database......

Note: The inbuilt function globals()[str] converts the string 'str' into a class name and returns the classname.

Demo Program-2:
------------------------
Reading class name from the file

config.txt:
EPSON

test.py:
-----------

1)	from abc import *
2)	class Printer(ABC):
3)	@abstractmethod
4)	def printit(self,text):
5)	pass
6)	@abstractmethod
7)	def disconnect(self):
8)	pass
9)
10)	class EPSON(Printer):
11)	def printit(self,text):
12)	print('Printing from EPSON Printer	')
13)	print(text)
14)	def disconnect(self):
15)	print('Printing completed on EPSON Printer	')
16)	
17)	class HP(Printer):
18)	def printit(self,text):
19)	print('Printing from HP Printer	')
20)	print(text)
21)	def disconnect(self):
22)	print('Printing completed on HP Printer...') 23)
24)	with open('config.txt','r') as f:
25)	pname=f.readline() 26)
27)	classname=globals()[pname]
28)	x=classname()
29)	x.printit('This data has to print...')
30)	x.disconnect()

Output:
----------
Printing from EPSON Printer... This data has to print...
Printing completed on EPSON Printer...

Public, Protected and Private Attributes:
---------------------------------------------------------
-->By default every attribute is public. We can access from anywhere either within the class or from outside of the class.
Ex: name='Mahesh' test.py:
-----------

1) class Test:
2)	x=10
3)	def init (self):
4)	self.y=20

test1.py:
-------------

1)	from test import Test
2)	class Test1:
3)	t=Test()
4)	print(t.x)
5)	print(t.y)
o/p:
10
20

-->Protected attributes can be accessed within the class anywhere but from outside of the class only in child classes. We can specify an attribute as protected by prefexing with _ symbol.

syntax: _variablename=value Ex: _name='Mahesh'

Ex:	
	1)	class Test:
	2)	_x=10
	3)	def init (self):
	4)	self._y=20
	5)	t=Test()
	6)	print(t._x)
	7)	print(t._y)

o/p:		
10		
20		

-->But is is just convention and in reality does not exists protected attributes.

-->private attributes can be accessed only within the class.i.e from outside of the class we cannot access. We can declare a variable as private explicitly by prefexing with 2 underscore symbols.

syntax: variablename=value Ex: name='Mahesh'

Demo Program:

1) class Test:
2)	x=10
3)	_y=20
4)	 z=30
5)	def m1(self):
6)	print(Test.x)
7)	print(Test._y)
8)	print(Test. z)
9)	t=Test() 10) t.m1()
11)	print(Test.x)
12)	print(Test._y)
13)	print(Test. z)

Output:
---------- 10
20
30
10
20
Traceback (most recent call last):
File "test.py", line 14, in <module> print(Test. z)
AttributeError: type object 'Test' has no attribute ' z'

How to access private variables from outside of the class:
---------------------------------------------------------------------------------
-->We cannot access private variables directly from outside of the class.
-->But we can access indirectly as follows objectreference._classname variablename
Ex:	
	1)	class Test:
	2)	    x=10
	3)	def init (self):
	4)	self. y=20
	5)	t=Test()
	6)	print(t. dict )#{'_Test y': 20}
	7)	print(t._Test y)#20
	8)	print(Test._Test x)#10

    str () method:
===============
-->Whenever we are printing any object reference internally str () method will be called which is returns string in the following format

< main .classname object at 0x022144B0>

-->To return meaningful string representation we have to override str () method.
Demo Program:
----------------------

1)	class Student:
2)	def init (self,name,rollno):
3)	self.name=name
4)	self.rollno=rollno
5)	def str (self):
6)		return 'This is Student with Name:{} and Rollno:{}'.format(self.name,self.rollno)
7)
8)	s1=Student('Mahesh',101)
9)	s2=Student('Durga',102)
10)	print(s1)
11)	print(s2)

o/p:D:\pythonclasses>py   test.py
This is student name:Mahesh and Roll no:101 This is student name:Durga and Roll no:102

output without overriding str ():
-------------------------------------------------
<  main .Student object at 0x022144B0>
<  main .Student object at 0x022144D0>

output with overriding str ():
--------------------------------------------
This is Student with Name:Durga and Rollno:101 This is Student with Name:Mahesh and Rollno:102

Difference between str() and repr() (OR) Difference between str () and repr ():
--------------------------------------------------------------------------------------------------------------------

-->str() internally calls  str () function and hence functionality of both is same.

-->Similarly,repr() internally calls repr () function and hence functionality of both is same.

-->str() returns a string containing a nicely printable representation object.

-->The main purpose of str() is for readability.It may not possible to convert result string to original object.
1)	import datetime
2)	today=datetime.datetime.now()
3)	s=str(today)#converting datetime object to str
4)	print(s)
5)	d=eval(s)#converting str object to datetime
6)	print(d)

o/p:py test.py
2018-11-30 09:06:50.207142
D:\pythonclasses>py test.py 2018-11-30 09:07:40.313067
Traceback (most recent call last):
File "test.py", line 5, in <module> d=eval(s)
File "<string>", line 1
2018-11-30 09:07:40.313067
^
SyntaxError: invalid token

-->But repr() returns a string containing a printable representation of object.
-->The main goal of repr() is unambigouous.
-->We can convert result string to original object by using eval() function,which may not possible in str() function.

Ex:

1)	import datetime
2)	today=datetime.datetime.now()
3)	s=repr(today)#converting datetime object to str
4)	print(s)
5)	d=eval(s)#converting str object to datetime
6)	print(d)
7)	print(type(d))

o/p:D:\pythonclasses>py test.py datetime.datetime(2018, 11, 30, 9, 9, 15, 322157)
2018-11-30 09:09:15.322157
<class 'datetime.datetime'>

Note: It is recommended to use repr() instead of str()
Mini Project: Banking Application
-----------------------------------------------

1)	class Account:
2)	def init (self,name,balance,min_balance):
3)	self.name=name
4)	self.balance=balance
5)	self.min_balance=min_balance
6)	def deposit(self,amount):
7)	self.balance +=amount
8)	def withdraw(self,amount):
9)	if self.balance-amount >= self.min_balance:
10)	self.balance -=amount
11)	else:
12)	print("Sorry, Insufficient Funds")
13)	def printStatement(self):
14)	print("Account Balance:",self.balance) 15)
16)	class Current(Account):
17)	def init (self,name,balance):
18)	super(). init (name,balance,min_balance=-1000)
19)	def str (self):
20)	return "{}'s Current Account with Balance :{}".format(self.name,self.balance) 21)
22)	class Savings(Account):
23)	def init (self,name,balance):
24)	super(). init (name,balance,min_balance=0)
25)	def str (self):
26)	return "{}'s Savings Account with Balance :{}".format(self.name,self.balance) 27)
28)	c=Savings("Mahesh",10000)
29)	print(c)
30)	c.deposit(5000)
31)	c.printStatement()
32)	c.withdraw(16000)
33)	c.withdraw(15000)
34)	print(c) 35)
36)	c2=Current('Durga',20000)
37)	c2.deposit(6000)
38)	print(c2)
39)	c2.withdraw(27000)
40)	print(c2)

